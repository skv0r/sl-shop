interface User {
    readonly id: number;
    name: string;
}

let user : User = {
    id: 1,
    name: "Alice"
}
//user.id = 1

class Rider implements User {
    constructor (public name: string, public readonly id: number) {}
}

interface UserClass {
    id: number;
    name: string;
    email: string;
}

const updateUser = (userId: number, userUpdates: Partial<UserClass>) => {}

updateUser (1, { name: ""});
updateUser (2, { email: "bob", name: ""})

//readonly<>

type UserPreview = Pick<UserClass, "id" | "name">;

const userPreview : UserPreview = {
    id: 1,
    name: "Alice"
};

// Omit<UserClass, "email"> –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–µ –∏–∑ –∫–ª–∞—Å—Å–∞

type UserRoles = "admin" | "user" | "guest";

const userPermissions: Record<UserRoles, boolean> = {
    admin: true,
    user: false,
    guest: true
}

//decorators skip

/*
1Ô∏è‚É£ –î–∂–µ–Ω–µ—Ä–∏–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (extends, keyof)
üìå –ó–∞–¥–∞–Ω–∏–µ:
–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é mergeObjects<T, U>, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–∏—Ö –µ—Å—Ç—å –æ–±—â–∏–µ –∫–ª—é—á–∏.
*/

function mergeObjects<T extends object, U extends object> (obj1: T, obj2: U) {
    const commonKeys: (keyof T & keyof U)[] = Object.keys(obj1).filter( key => key in obj2) as (keyof T & keyof U)[];
    return commonKeys;
}

const obj1 = { name: "Alice", age: 25 };
const obj2 = { age: 30, city: "New York" };
const merged = mergeObjects(obj1, obj2);
console.log(merged);